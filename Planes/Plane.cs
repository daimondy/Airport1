using Airport.AirportManagement;
using System.Windows.Forms;
using System;

namespace Airport.Planes
{
    /*
        Абстрактный класс, потому что самолет должен иметь какой-то тип
    */

    public abstract class Plane : PlaneImage
    {
        public static int IDcounter = 0;

        private bool autoGenerated;

        //технические параметры самолета
        private int maxFuelLevel;
        private int takeoffInterval;                 
        private int technicalInspectionTime;         
        private int fuelUsage;                       
        private string model;
        private int ID;


        //переменные, определяющие состояние самолета
        private State currentState;
        private int currentFuelLevel;
        private int currentTechnicalInspectionProgress;
        private bool afterTechnicalInspection;


        //свойства самолета
        public void setFuelUsage(int fuelUsage) { this.fuelUsage = fuelUsage; }
        public int getMaxFuelLevel()  { return maxFuelLevel; }
        public void setMaxFuelLevel(int maxFuelLevel) { this.maxFuelLevel = maxFuelLevel; }
        public int getTakeoffInterval() { return takeoffInterval; }
        public void setTakeoffTime(int takeoffTime) { takeoffInterval = takeoffTime; }
        public int getID() { return ID; }
        public string getModel() { return model; }
        public void setModel(string model) { this.model = model; }
        public string getModelID() { return model + " (ID: " + ID + ")"; }
        public int getCurrentTechnicalInspectionProgress() { return currentTechnicalInspectionProgress; }
        public void setAfterTechnicalInspection(bool afterTechnicalInspection)
        {
            this.afterTechnicalInspection = afterTechnicalInspection;
        }
        public int getTechnicalInspectionTime() { return technicalInspectionTime; }
        public State getCurrentState() { return currentState; }
        public void setCurrentState(State newState)
        {
                currentState = newState;
                setStateImage(newState);
                AirportManager.getInstance().refreshButtonPanelIfSelected(this);
                AirportManager.getInstance().refreshInformationPanelIfSelected(this);
        }
        public int getCurrentFuelLevel() { return currentFuelLevel; }
        public void setCurrentFuelLevel(int fuelLevel) {
            currentFuelLevel = fuelLevel;
            AirportManager.getInstance().refreshInformationPanelIfSelected(this);
        }
        public void setCurrentTechnicalInspectionProgress(int progress)
        {
            currentTechnicalInspectionProgress = progress;
            AirportManager.getInstance().refreshInformationPanelIfSelected(this);
        }
        public int getFuelUsage() { return fuelUsage; }
        public bool isTanked()
        {
            if (maxFuelLevel == currentFuelLevel) return true;
            return false;
        }
        public bool isAfterTechnicalInspection() { return afterTechnicalInspection; }

        public bool isAutoGenerated() { return autoGenerated; }
        public void setAutoGenerated(bool autoGenerated) { this.autoGenerated = autoGenerated; }

        abstract public bool isEmpty();

        abstract public string getInformation();
    }

}
